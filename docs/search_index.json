[["index.html", "1 Welcome to S2Y Lab 1 1.1 Introduction 1.2 Optional: RStudio Quickstart Guide 1.3 Credit where credit is due", " S2Y Lab 1 Exploring relationships and fitting linear models 1 Welcome to S2Y Lab 1 Intended Learning Outcomes: produce scatterplots of report quality; fit linear regression models by using lm; interpret least squares estimates of model parameters; calculate least squares estimates of model parameters for simple linear regression. 1.1 Introduction In the lectures we have examined relationships between variables using scatterplots. We have considered how to fit a linear model, through estimating the parameters such as \\(\\beta\\) in the linear model \\(Y_i = \\alpha + \\beta x_i +\\epsilon _i\\), by the method of least squares or maximum likelihood. In today’s lab we shall use RStudio to explore and fit relationships using a variety of linear model examples. We assume that the data take the form \\((y_i, x_i)\\) for \\(i = 1, . . . , n\\) and we will model the following relationship \\(Y_i = f(x_i) + \\epsilon_i\\). 1.2 Optional: RStudio Quickstart Guide This course assumes basic knowledge of R and RStudio. The starting point is opening RStudio by going to: Maths &amp; Stats Apps &gt; RStudio To access the data in this course, it is best to open and save a new script file to work in within RStudio and to set the working directory. This will enable you to save your R commands and comments on your work as you go through each of the examples. To open a new script go to: File &gt; New &gt; R script This will open a new screen for you to type into. Go to: File &gt; Save as and save the script file into your home directory. Now, start by setting the working directory in RStudio to the directory in which you have stored both the data and R script. One way of doing this is to go to: Session &gt; Set Working Directory &gt; To Source File Location This will point RStudio towards this directory to enable us to use files within that directory. It is useful to annotate your script file using comments so that you know what has been done when you look at it in the future. Comments can be added to a script file by starting the line with a # symbol. 1.3 Credit where credit is due The labs in S2Y incorporate and adapt materials from: Ugarte, M. D., Militino, A. F., &amp; Arnholt, A. T. (2008). Probability and Statistics with R. CRC press. The materials were converted into interactive labs using Bookdown and webexercises in Summer 2022 by four summer project students, Jennifer James, Megan Ruffle, Naphon Olley, William Ryan. "],["example-1-simple-linear-regression-slr.html", "2 Example 1: Simple linear regression (SLR) 2.1 Creating scatterplots 2.2 Fitting a linear model", " 2 Example 1: Simple linear regression (SLR) The admissions committee of a comprehensive state university selected at random the records of 200 second-semester freshmen. The results, first-semester college GPA and SAT scores, are stored in the data set Grades in the package PASWR. The admissions committee wants to study the relationship between first-semester college grade point average (gpa) and scholastic aptitude test (sat) scores. To open this data file, type: install.packages(&quot;PASWR&quot;) library(PASWR) GRADES &lt;- Grades This will assign the data to the object GRADES. To view the data, type GRADES into the script file and running that line by either placing the cursor on the line and pressing Ctrl and Enter, or by clicking on the Run button in the top-right corner of the script file. The data will then appear in the Console window below. A spreadsheet of the data can be viewed by typing: fix(GRADES) but note that you will need to close this window before trying to excute any further commands. The spreadsheet can also be viewed by clicking on the GRADES object in the Workspace (top right of the screen). 2.1 Creating scatterplots The relationship between gpa and sat scores can be examined by using a scatterplot: plot(gpa ~ sat, data = GRADES) This will produce the basic scatterplot of gpa (y-axis) against sat (x-axis) shown in Figure 2.1. Figure 2.1: Scatterplot of gpa versus sat. There are several options for annotating plots. First of all, you should add sensible axis labels to the plot. For example, by typing: plot(gpa ~ sat, data = GRADES, xlab = &quot;SAT score&quot;, ylab = &quot;GPA&quot;) This will produce the scatterplot displayed in Figure 2.2. Figure 2.2: Scatterplot of gpa versus sat with annotated axis labels. Now edit the points by changing the symbol type, size and colour, such as plot(gpa ~ sat, data = GRADES, xlab = &quot;SAT score&quot;, ylab = &quot;GPA&quot;, pch = 2, cex = 1.5, col = &quot;blue&quot;) The plotting character is determined by the pch argument, the size of the plotted characters by cex, and the colour by the 1col` argument, to produce Figure 2.3. Figure 2.3: Scatterplot of gpa versus sat with annotated axis labels and different characters plotted. DISCUSSION: Looking at your plot, what can we say about the relationship between gpa and sat? Hint Is the relationship linear or non-linear? Is the relationship positive or negative? How strong is the relationship? 2.2 Fitting a linear model To find the equation that best describes the relationship between gpa and sat use: lm(gpa ~ sat, data = GRADES) This fits a simple linear regression model with the response variable gpa and the explanatory variable sat. From the R output, note down the equation of the fitted line that is given: (Enter your answers to 3 decimal places.) gpa = + sat Solution model.lm&lt;- lm(gpa ~ sat, data = GRADES) coef(model.lm) ## (Intercept) sat ## -1.19206381 0.00309427 This is the line of best fit, describing the effect of sat on gpa. QUESTION: Which of the following is the correct interpretation of the regression model? The intercept of the fitted line is -1.192, so for every unit increase in sat, we expect gpa to decrease by 1.192. The intercept of the fitted line is -1.192, so for every unit increase in gpa, we expect sat to decrease by 1.192. The slope coefficient of the fitted line is 0.0031, so for every unit increase in sat, we expect gpa to increase by 0.0031. The coefficient of the fitted line is 0.0031, so for every unit increase in gpa, we expect sat to increase by 0.0031. QUESTION: Use R to calculate the point estimate of the change in the mean GPA when the SAT score increases by 50 points. Solution coef(model.lm)[1]*50 ## (Intercept) ## -59.60319 Plot of the data including the fitted line To obtain a plot of the fitted values, we need to store the regression in an object: model &lt;- lm(gpa ~ sat, data = GRADES) A plot of the data can be re-produced as before with the fitted line added using the abline command. This command uses the intercept and slope information from the fitted line in model. This is done using: plot(gpa ~ sat, data = GRADES, xlab = &quot;SAT score&quot;, ylab = &quot;GPA&quot;) abline(model) "],["example-2-multiple-linear-regression.html", "3 Example 2: Multiple linear regression 3.1 Exploratory analysis 3.2 Fitting a linear model", " 3 Example 2: Multiple linear regression The body fat of 78 high school wrestlers was measured using three separate techniques, namely hydrostatic weighing, skin fold measurements and the Tanita body fat scale. The results are stored in the data set HSwrestler in the PASWR package. Read in the data using: HSWRESTLER &lt;- HSwrestler The data set contains nine columns, described as follows: AGE: age of wrestler in years HT: height of wrestler in inches WT: weight of wrestler in pounds ABS: abdominal fat TRICEPS: tricep fat SUBSCAP: subscapular fat HWFAT: hydrostatic fat TANFAT: Tanita fat SKFAT: skin fat This can be seen by typing: names(HSWRESTLER) In this example, it is of interest to investigate how hydrostatic fat (HWFAT) is related to abdominal fat (ABS) and tricep fat (TRICEPS). 3.1 Exploratory analysis TASK 1 Produce scatterplots of HWFAT (y) against Lactic ABS (x), and HWFAT (y) against TRICEPS (x). Describe the relationship between HWFAT (y), ABS (x) and TRICEPS. 3.2 Fitting a linear model In Example 1, the function lm() was used to find estimates for parameters of a simple linear regression model. The same function can be used for multiple linear regression models by specifying the explanatory variables on the right side of the tilde (~) operator inside the lm() function. To build a multiple linear regression model with hwfat as the response variable and abs and triceps (tricep fat) as explanatory variables, type: lm(HWFAT ~ ABS + TRICEPS, data = HSWRESTLER) Note down the equation of the fitted line from that is given: HWFAT = + ABS + TRICEPS QUESTION: Interpret what each coefficient means. For every unit increase in abdominal fat, hydrostatic fat is expected to increasedecrease by 0.3370.5042.059 unit, regardless of tricep fatwhile holding tricep fat constant. For every unit increase in tricep fat, hydrostatic fat is expected to increasedecrease by 0.3370.5042.059 unit, regardless of abdominal fatwhile holding abdominal fat constant. "],["exercise-1-slr-with-no-intercept.html", "4 Exercise 1: SLR with no intercept 4.1 Fitting a linear model with no intercept", " 4 Exercise 1: SLR with no intercept Introducing the data: Hubble's Constant Source: Hubble, E. (1929) A Relationship Between Distance and Radial Velocity among Extra-Galactic Nebulae, Proceedings of the National Academy of Science, 168. Context: In 1929 Edwin Hubble investigated the relationship between distance and radial velocity of extragalactic nebulae (celestial objects). It was hoped that some knowledge of this relationship might give clues as to the way the universe was formed and what may happen later. His findings revolutionised astronomy and are the source of much research today on the ‘Big Bang’. Given here is the data that Hubble used for 24 nebulae. It is of interest to determine the effect of distance on velocity. Data: hubble.csv Columns:                       C1: Distance (in Megaparsecs) from Earth                       C2: Velocity recession (in km/sec) Read in the data using: hubble &lt;- read.csv(&quot;hubble.csv&quot;) Exploratory analysis TASK 2 Produce a scatterplot of the data with Velocity on the y-axis. Describe the shape of the relationship. The relationship appears to be non-linearlinear and it seems plausibledoes not seem plausible that the line passes through the origin. Fitting a simple linear regression model Fit a simple linear regression model with the response variable Velocity and the explanatory variable Distance and write down the equation of the fitted line. The equation of the fitted line is given by: Velocity = + Distance This is the line of best fit, describing the effect of distance on velocity. Produce a plot of the data including the fitted line. Hint A fitted line can be added to a plot using the command abline. 4.1 Fitting a linear model with no intercept From the scatterplot in (a), it is plausible from the data that the regression line should be forced to go through the origin. A model with no intercept could be fitted using: lm(Velocity ~ -1 + Distance, data = hubble) The inclusion of -1 is what removes the intercept term from the model fit. Note down the equation of the fitted line that is given: Velocity = Distance If we save the model with and without intercept using model.Int &lt;- lm(Velocity ~ Distance, data = hubble) model.NoInt &lt;- lm(Velocity ~ -1 + Distance, data = hubble) a plot of the data can be re-produced as before with the fitted lines from both linear models added using the command: plot(Velocity ~ Distance, data = hubble) abline(model.Int, col = &quot;red&quot;) abline(model.NoInt, col = &quot;blue&quot;, lty = 2) legend(&quot;topleft&quot;, legend = c(&quot;with intercept&quot;, &quot;w/o intercept&quot;), lty = c(1,2), col = c(&quot;red&quot;,&quot;blue&quot;), bty = &quot;n&quot;) Figure 4.1: Scatterplot of Velocity versus Distance with two fitted models - simple linear regression model with and without the intercept. The lty argument in abline changes the type/style of the line plotted, which is handy when printing in black and white. A legend is also added to distinguish between the lines plotted. DISCUSSION: Comparing the two fitted lines, is the model that passes through the origin plausible? "],["exercise-2-quadratic-regression.html", "5 Exercise 2: Quadratic regression 5.1 Fitting a quadratic regression model", " 5 Exercise 2: Quadratic regression Introducing the data: Publishing history Source: Tweedie, F. J., Bank, D. A. and McIntyre, B. (1998) Modelling Publishing History, 1475–1640: Change points in the STC. Context: The Short Title Catalogue (STC) is a list of all the books that were published in Scotland, England and Ireland between 1475 and 1640. We are interested in finding out if there are any changes in the number of books published between 1500 and 1640. Data: books.csv Columns:               C1: Year (1500 – 1640)               C2: Total number of books published Read in the data using: books &lt;- read.csv(&quot;books.csv&quot;) Exploratory analysis TASK 3 Produce a scatterplot of the data with Number of books on the y-axis and Year on the x-axis. Describe the shape of the relationship. Does it seem linear? 5.1 Fitting a quadratic regression model Use the commands below to fit a quadratic regression and output the model summary: model &lt;- lm(Number.of.Books ~ Year + I(Year^2), data = books) summary(model) Note: year^2 needs to be 'protected' by I, the identity function. Note down the equation of the fitted quadratic line and plot the fitted line. Total number of books = + Year + Year^2 Hint The R command lines() can be used to plot the points obtained by using fitted() on the model. "],["example-3-doing-calculations-in-r.html", "6 Example 3: Doing calculations in R", " 6 Example 3: Doing calculations in R We will now consider how to use RStudio to do more calculations. First of all, open a data set called , which contains some 'toy' data, by using the command: Calc &lt;- read.csv(&quot;Calc.csv&quot;) We will now create a number of new vectors by combining the columns named data1 and data2 and also by transforming each of these columns using the square-root function, sqrt, and the natural logarithm function, log (there are many other possibilities). Produce and examine the results from the following: Calc$data1 - Calc$data2 # difference Calc$data1 / Calc$data2 # division Calc$data1 * Calc$data2 # multiplication sqrt(Calc$data1) # square-root log(Calc$data1) # natural log Calc$data1^2 # square sum(Calc$data1^2) # sum of squares sum(Calc$data1 * Calc$data2) # sum of products Note: the $ sign extracts the variables data1, data2 from the dataframe Calc. Recall from lectures that for a line that passes through the origin, \\(Y_i = \\beta x_i + \\epsilon_i\\), the best estimate of \\(\\beta\\), that is, \\(\\hat{\\beta}\\) is \\[\\hat{\\beta} = \\frac{\\sum_{i=1}^n x_i y_i}{\\sum_{i=1}^n x_i^2}\\] QUESTION: Using the Hubble data from Exercise 1 and the above calculations, produce the estimate of \\(\\hat{\\beta}\\), that is, Hubble's Constant. Solution beta_hat &lt;- sum(hubble$Distance * hubble$Velocity) / sum(hubble$Distance * hubble$Distance) beta_hat "],["solution.html", "7 Solution", " 7 Solution TASK 1 Producing a scatterplot plot(HWFAT ~ ABS, data = HSWRESTLER) plot(HWFAT ~ TRICEPS, data = HSWRESTLER) TASK 2 Producing a scatterplot # Producing a scatterplot plot(Velocity ~ Distance, data = hubble, xlab=&quot;Distance&quot;, ylab=&quot;Velocity&quot;) Fitting a simple linear regression model model_hubble &lt;- lm(Velocity ~ Distance, data = hubble) coef((model_hubble)) Producing a plot of the data including the fitted line plot(Velocity ~ Distance, data = hubble) abline(model_hubble) TASK 3 Producing a scatterplot books &lt;- read.csv(&quot;books.csv&quot;) plot(Number.of.Books ~ Year, data = books, xlab = &quot;Books&quot;, ylab = &quot;Number of books&quot;) Plotting the fitted line plot(Number.of.Books ~ Year, data = books, xlab = &quot;Books&quot;, ylab = &quot;Number of books&quot;) lines(fitted(bmodel)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
